# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32F1xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags, common.lib_deps and common.lib_extra_dirs
# below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e BTT_SKR_MINI_E3_V20 -e BTT_SKR_MINI_E3_V20_USB
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e bluepill_f103c8_128k -t upload
#    # Clean up build related resources
#    pio run -t clean
#

#
# NOTE: PlatformIO support is provided by the community and platformio.ini is
# not maintained or tested by the repo owner.
# Please submit a PR with bug fixes and enhancments.
#

[platformio]
include_dir = Inc
src_dir = Src

[common]
build_flags =
  -I .
  -I boards
  -I FatFs
  -I FatFs/STM
  -I Drivers/FATFS/Target
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/App
  -I USB_DEVICE/Target
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D _VOLUMES=1 
  -Wl,-u,_printf_float
  -Wl,-u,_scanf_float
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  -D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  #-D DEBUG
  # Uncomment to enable support for keypad
  #-D KEYPAD_ENABLE=1
  # Uncomment to enable support for odometer
  #-D ODOMETER_ENABLE=1
  # Uncomment to enable support for running G-code from the microSD card
  # You also need to uncomment FatFS and sdcard in lib_deps (see below)
  #-D SDCARD_ENABLE=1
  # Set to 1 or 2 (see Inc/my_machine.h)
  #-D SPINDLE_HUANYANG=1
lib_deps =
  boards
  bluetooth
  grbl
  keypad
  laser
  motors
  trinamic
  odometer
  fans
  spindle
  embroidery
  picohal
  Drivers/FATFS/App
  Drivers/FATFS/Target
  # USB serial support
  Middlewares/ST/STM32_USB_Device_Library/Core
  Middlewares/ST/STM32_USB_Device_Library/Class
  USB_DEVICE/App
  USB_DEVICE/Target
  FatFs
  sdcard
lib_extra_dirs =
  .
  boards
  FatFs
  Middlewares/ST/STM32_USB_Device_Library
  USB_DEVICE

[eth_networking]
build_flags =
  -I LWIP/App
  -I LWIP/dp83848/Target
  -I Middlewares/Third_Party/LwIP/src/include
  -I Middlewares/Third_Party/LwIP/system
  -I Middlewares/Third_Party/LwIP/src/include/netif
  -I Middlewares/Third_Party/LwIP/src/include/lwip
  -I Drivers/BSP/Components/dp83848
lib_deps =
   networking
   webui
   LWIP/App
   LWIP/dp83848/Target
   Middlewares/Third_Party/LwIP
   Drivers/BSP/Components/dp83848
lib_extra_dirs =

[wiznet_networking]
build_flags =
  -I networking/wiznet
  -I Middlewares/Third_Party/LwIP/src/include
  -I Middlewares/Third_Party/LwIP/system
  -I Middlewares/Third_Party/LwIP/src/include/netif
  -I Middlewares/Third_Party/LwIP/src/include/lwip
  -D ETH_TX_DESC_CNT=12
  -D TCP_MSS=1460
  -D TCP_SND_BUF=5840
  -D LWIP_NUM_NETIF_CLIENT_DATA=2
  -D LWIP_HTTPD_CUSTOM_FILES=0
  -D LWIP_IGMP=1
  -D LWIP_MDNS_RESPONDER=1
  -D LWIP_NETIF_STATUS_CALLBACK=1
  -D LWIP_HTTPD_DYNAMIC_HEADERS=1
  -D LWIP_HTTPD_DYNAMIC_FILE_READ=1
  -D LWIP_HTTPD_SUPPORT_V09=0
  -D LWIP_HTTPD_SUPPORT_11_KEEPALIVE=1
  -D LWIP_HTTPD_CGI_ADV=1
  -D LWIP_HTTPD_SUPPORT_POST=1
  -D LWIP_HTTPD_SUPPORT_WEBDAV=1
lib_deps =
   networking
   webui
   Middlewares/Third_Party/LwIP
lib_extra_dirs =

[env]
platform = ststm32
platform_packages = framework-stm32cubef4 @ ~1.26.2
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off

[env:f446re_flexi_cnc]
board = genericSTM32F446RE
; change microcontroller
board_build.mcu = stm32f446ret6
board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  ${wiznet_networking.build_flags}
  -D USB_SERIAL_CDC=1
  -D BOARD_FLEXI_HAL=1
  -D USE_HAL_DRIVER
  -D HSE_VALUE=25000000
  -D MEM_SIZE=16384
  -D NVS_SIZE=16384 # NECESSARY OR CAN REMOVE?
  -D USE_SPI_DMA=1 # NECESSARY OR CAN REMOVE?
  -D DEFAULT_PLANNER_BUFFER_BLOCKS=128
  -D MEM_NUM_PBUF=24
  -D PBUF_POOL_SIZE=12
  -D HAS_BOOTLOADER=1
  -D UF2_BOOTLOADER=1
# NETWORKING  
  -D _WIZCHIP_=5500
  -D ETHERNET_ENABLE=1
  -D FTP_ENABLE=1
  -D TELNET_ENABLE=1
#  -D MDNS_ENABLE=0
#  -D SSDP_ENABLE=0
# KEYPAD
  -D KEYPAD_ENABLE=1
  -D DISPLAY_ENABLE=9
  -D MACROS_ENABLE=2
  -D N_MACROS=6
  -D ENABLE_SWD=1
# OTHER
  -D N_AXIS=4
  -D ROTARY_FIX=1
#  -D SAFETY_DOOR_ENABLE=1  
  -D NGC_EXPRESSIONS_ENABLE=1
  -D ENABLE_BACKLASH_COMPENSATION=1
  -D SDCARD_ENABLE=2
  -D PROBE_ENABLE=0
  -D ESTOP_ENABLE=1
  -D MODBUS_ENABLE=1
  -D PICOHAL_IO_ENABLE=1
  -D STOP_DISABLE_ENABLE=1
  -D BLOCK_DELETE_ENABLE=1
  -D SINGLE_BLOCK_ENABLE=1
#  -D LIMITS_OVERRIDE_ENABLE=1
  -D SPINDLE0_ENABLE=SPINDLE_MY_SPINDLE
lib_deps = ${common.lib_deps}
  eeprom
  ${wiznet_networking.lib_deps}

lib_extra_dirs = ${common.lib_extra_dirs}
extra_scripts = 
    post:flexi_script.py
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink
debug_tool = stlink